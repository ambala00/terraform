#Day3: #Terraform Local Value and Workspace:
#-------------------------------------------

#i) TERRAFORM LOCALS BLOCK VALUE:
#---------------------------------
# Definition: In Terraform, alocal is essentially a named value that lives within a specific module or configuration. It's like a temporary variable that you can use and resue within that scope, making our code cleaner and  more efficient.

# creation of VPC, Subent, and EC2 instance,
#--------------------------------------------

provider "aws" {
  region = "ap-south-1"
}

locals {
  env = "dev" or "test" or "production"
}

resource "aws_vpc" "one" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "${local.env}-vpc"
  }
}

resource "aws_subnet" "one" {
  cidr_block = "10.0.0.0/16"
  availability_zone = "ap-south-1a"
  vpc_id = aws_VPC.one.id
  tags = {
    Name = "${local.env}-subent"
  }
}

resource "aws_instance" "three" {
  ami = "ami-<unique ami ID>"
  instance_type = "t2.micro"
  subnet_id = aws_subnet.one.id
  tags = {
    Name = "${local.env}-instance"
  }
}

# terraform init
# terraform validate
# terraform plan
# terraform apply --auto-approve

# NOTE: 1) '+' means adding new resource
#       2) '-' means deleting the existing resource
#       3) '~' means updating the existing resource

#======================================================================================================================================================

#ii) TERRAFORM WORKSPACE:
#------------------------

#Definition: Workspaces allow users to manage different sets of infrastructure using the same configuration by isolating state files.

provider "aws" {
  region = "ap-south-1"
}

locals {
  env = "${terraform.workspace}"
}

resource "aws_vpc" "one" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "${local.env}-vpc"
  }
}

resource "aws_subnet" "one" {
  cidr_block = "10.0.0.0/16"
  availability_zone = "ap-south-1a"
  vpc_id = aws_VPC.one.id
  tags = {
    Name = "${local.env}-subent"
  }
}

resource "aws_instance" "three" {
  ami = "ami-<unique ami ID>"
  instance_type = "t2.micro"
  subnet_id = aws_subnet.one.id
  tags = {
    Name = "${local.env}-instance"
  }
}

# terraform workspace list // it show *default
# To create a new workspace: #terraform workspace new <Environment NAME>
                        #eg: #terraform workspace new development-environment
# vi main.tf //change the configuration of infra resources
# terraform apply --auto-approve // go and check the infra resources.


# terraform workspace list // it shows *development-environment
# terraform workspace show // it shows the current workspace we are


# To create a new workspace: #terraform workspace new <Environment NAME>
                        #eg: #terraform workspace new testing-environment
# vi main.tf //change the configuration of infra resources
# terraform apply --auto-approve // go and check the infra resources.


# To create a new workspace: #terraform workspace new <Environment NAME>
                        #eg: #terraform workspace new production-environment
# vi main.tf //change the configuration of infra resources
# terraform apply --auto-approve // go and check the infra resources.

# To delete a created workspace: 1st destroy the terraform resource that mentioned main.tf file and switch to anyone workspace,
# terraform destroy --auto-approve
# terraform workspace select Testing-Environment
# terraform workspace delete <Environment>
# EG: terraform workspace delete Production-Environment

# Again do same process to delete the workspace remainings of i) Testing-Environment ii) Developing-Environment,
# terraform destroy --auto-approve
# terraform workspace select Developing-Environment
# terraform workspace delete <Environment>
# EG: terraform workspace delete Testing-Environment

# terraform destroy --auto-approve
# terraform workspace select default
# terraform workspace delete <Environment>
# EG: terraform workspace delete Developing-Environment


#==========================================================================================================================================================

#iii) TERRAFORM ALIAS and PROVIDER:
#-----------------------------------

provider "aws" {
  region = "ap-south-1"
  alias = "mumbai"
}

resource "aws_instance" "one" {
  ami = "ami-<unique ami id from specific region>"
  provider = aws.mumbai
  instance_type = "t2.micro"
  tags = {
    Name = "Mumbai-instance"
  }
}

provider "aws" {
  region = "ap-northeast-1"
  alias = "tokyo"
}

resource "aws_instance" "two" {
  ami = "ami-<unique ami id from specific region>"
  provider = aws.tokyo
  instance_type = "t2.micro"
  tags = {
    Name = "Tokyo-instance"
  }
}

# terraform apply --auto-approve //go and check in tokyo and mumbai region it create instance resource by using one main.tf file.
#=============================================================================================================================================================
